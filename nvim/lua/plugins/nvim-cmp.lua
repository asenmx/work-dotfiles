return {}
-- return { {
--     "hrsh7th/nvim-cmp",
--     version = false, -- last release is way too old
--     event = "InsertEnter",
--     dependencies = {
--         "hrsh7th/cmp-nvim-lsp",
--         "hrsh7th/cmp-buffer",
--         "hrsh7th/cmp-path",
--         "hrsh7th/cmp-cmdline",
--         "onsails/lspkind.nvim",
--         "saadparwaiz1/cmp_luasnip",
--         {
--             "L3MON4D3/LuaSnip",
--             version = "v2.*",
--             build = "make install_jsregexp"
--         }
--     },
--     opts = function()
--         vim.api.nvim_set_hl(0, "CmpGhostText", { link = "Comment", default = true })
--         local cmp = require("cmp")
--         local defaults = require("cmp.config.default")()
--         local luasnip = require 'luasnip'
--         local lspkind = require('lspkind')
--         return {
--             completion = {
--                 completeopt = "menu,menuone,noinsert",
--             },
--             snippet = {
--                 expand = function(args)
--                     require("luasnip").lsp_expand(args.body)
--                 end,
--             },
--             mapping = cmp.mapping.preset.insert({
--                 ["<C-n>"] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
--                 ["<C-p>"] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
--                 ["<C-b>"] = cmp.mapping.scroll_docs(-4),
--                 ["<C-f>"] = cmp.mapping.scroll_docs(4),
--                 ["<C-Space>"] = cmp.mapping.complete(),
--                 ["<C-e>"] = cmp.mapping.abort(),
--                 ["<CR>"] = cmp.mapping({
--                     i = function(fallback)
--                         if cmp.visible() and cmp.get_active_entry() then
--                             cmp.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = false })
--                         else
--                             fallback()
--                         end
--                     end,
--                     s = cmp.mapping.confirm({ select = true }),
--                     c = cmp.mapping.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = true }),
--                 }),
--             }),
--             sources = cmp.config.sources({
--                 { name = "nvim_lsp" },
--                 { name = "buffer" },
--                 { name = "path" },
--                 { name = 'luasnip' },
--             }),
--             formatting = {
--                 format = lspkind.cmp_format({
--                     mode = "symbol_text",
--                     menu = ({
--                         buffer = "[Buffer]",
--                         nvim_lsp = "[LSP]",
--                         luasnip = "[LuaSnip]",
--                         nvim_lua = "[Lua]",
--                         latex_symbols = "[Latex]",
--                     })
--                 }),
--             },
--             experimental = {
--                 ghost_text = {
--                     hl_group = "CmpGhostText",
--                 },
--             },
--             sorting = defaults.sorting,
--         }
--     end,
-- } }
